{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "candidateNames",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "candidateList",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCandidateList",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "candidate",
          "type": "bytes32"
        }
      ],
      "name": "totalVotesFor",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "candidate",
          "type": "bytes32"
        }
      ],
      "name": "validCandidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "candidate",
          "type": "bytes32"
        }
      ],
      "name": "voteForCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "votesReceived",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/votingDaliMMA.sol"
  },
  "ast": {
    "absolutePath": "contracts/votingDaliMMA.sol",
    "exportedSymbols": {
      "Voting": [
        101
      ]
    },
    "id": 102,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".22",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "36:32:0"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 101,
        "linearizedBaseContracts": [
          101
        ],
        "name": "Voting",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "7021939f",
            "id": 5,
            "mutability": "mutable",
            "name": "votesReceived",
            "nodeType": "VariableDeclaration",
            "scope": 101,
            "src": "375:47:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint8_$",
              "typeString": "mapping(bytes32 => uint8)"
            },
            "typeName": {
              "id": 4,
              "keyType": {
                "id": 2,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "384:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "375:26:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint8_$",
                "typeString": "mapping(bytes32 => uint8)"
              },
              "valueType": {
                "id": 3,
                "name": "uint8",
                "nodeType": "ElementaryTypeName",
                "src": "395:5:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint8",
                  "typeString": "uint8"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "b13c744b",
            "id": 8,
            "mutability": "mutable",
            "name": "candidateList",
            "nodeType": "VariableDeclaration",
            "scope": 101,
            "src": "595:30:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
              "typeString": "bytes32[]"
            },
            "typeName": {
              "baseType": {
                "id": 6,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "595:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "id": 7,
              "nodeType": "ArrayTypeName",
              "src": "595:9:0",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                "typeString": "bytes32[]"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 18,
              "nodeType": "Block",
              "src": "898:41:0",
              "statements": [
                {
                  "expression": {
                    "id": 16,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 14,
                      "name": "candidateList",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 8,
                      "src": "904:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
                        "typeString": "bytes32[] storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 15,
                      "name": "candidateNames",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11,
                      "src": "920:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                        "typeString": "bytes32[] memory"
                      }
                    },
                    "src": "904:30:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
                      "typeString": "bytes32[] storage ref"
                    }
                  },
                  "id": 17,
                  "nodeType": "ExpressionStatement",
                  "src": "904:30:0"
                }
              ]
            },
            "id": 19,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 12,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 11,
                  "mutability": "mutable",
                  "name": "candidateNames",
                  "nodeType": "VariableDeclaration",
                  "scope": 19,
                  "src": "858:31:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 9,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "858:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 10,
                    "nodeType": "ArrayTypeName",
                    "src": "858:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "857:33:0"
            },
            "returnParameters": {
              "id": 13,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "898:0:0"
            },
            "scope": 101,
            "src": "846:93:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 27,
              "nodeType": "Block",
              "src": "1207:31:0",
              "statements": [
                {
                  "expression": {
                    "id": 25,
                    "name": "candidateList",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 8,
                    "src": "1220:13:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
                      "typeString": "bytes32[] storage ref"
                    }
                  },
                  "functionReturnParameters": 24,
                  "id": 26,
                  "nodeType": "Return",
                  "src": "1213:20:0"
                }
              ]
            },
            "functionSelector": "fdbc4006",
            "id": 28,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getCandidateList",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 20,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1165:2:0"
            },
            "returnParameters": {
              "id": 24,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 28,
                  "src": "1189:16:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 21,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1189:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 22,
                    "nodeType": "ArrayTypeName",
                    "src": "1189:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1188:18:0"
            },
            "scope": 101,
            "src": "1140:98:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 47,
              "nodeType": "Block",
              "src": "1387:90:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 40,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "id": 37,
                              "name": "candidate",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 30,
                              "src": "1416:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 36,
                            "name": "validCandidate",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 100,
                            "src": "1401:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bool_$",
                              "typeString": "function (bytes32) view returns (bool)"
                            }
                          },
                          "id": 38,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1401:25:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "74727565",
                          "id": 39,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1430:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "src": "1401:33:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 35,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1393:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 41,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1393:42:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 42,
                  "nodeType": "ExpressionStatement",
                  "src": "1393:42:0"
                },
                {
                  "expression": {
                    "baseExpression": {
                      "id": 43,
                      "name": "votesReceived",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5,
                      "src": "1448:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint8_$",
                        "typeString": "mapping(bytes32 => uint8)"
                      }
                    },
                    "id": 45,
                    "indexExpression": {
                      "id": 44,
                      "name": "candidate",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 30,
                      "src": "1462:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1448:24:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "functionReturnParameters": 34,
                  "id": 46,
                  "nodeType": "Return",
                  "src": "1441:31:0"
                }
              ]
            },
            "functionSelector": "2f265cf7",
            "id": 48,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "totalVotesFor",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 31,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 30,
                  "mutability": "mutable",
                  "name": "candidate",
                  "nodeType": "VariableDeclaration",
                  "scope": 48,
                  "src": "1340:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 29,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1340:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1339:19:0"
            },
            "returnParameters": {
              "id": 34,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 33,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 48,
                  "src": "1380:5:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 32,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1380:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1379:7:0"
            },
            "scope": 101,
            "src": "1317:160:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 67,
              "nodeType": "Block",
              "src": "1649:88:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 58,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "id": 55,
                              "name": "candidate",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 50,
                              "src": "1678:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 54,
                            "name": "validCandidate",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 100,
                            "src": "1663:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bool_$",
                              "typeString": "function (bytes32) view returns (bool)"
                            }
                          },
                          "id": 56,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1663:25:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "74727565",
                          "id": 57,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1692:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "src": "1663:33:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 53,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1655:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 59,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1655:42:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 60,
                  "nodeType": "ExpressionStatement",
                  "src": "1655:42:0"
                },
                {
                  "expression": {
                    "id": 65,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 61,
                        "name": "votesReceived",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5,
                        "src": "1703:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint8_$",
                          "typeString": "mapping(bytes32 => uint8)"
                        }
                      },
                      "id": 63,
                      "indexExpression": {
                        "id": 62,
                        "name": "candidate",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 50,
                        "src": "1717:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1703:24:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 64,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1731:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "1703:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "id": 66,
                  "nodeType": "ExpressionStatement",
                  "src": "1703:29:0"
                }
              ]
            },
            "functionSelector": "cc9ab267",
            "id": 68,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "voteForCandidate",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 51,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 50,
                  "mutability": "mutable",
                  "name": "candidate",
                  "nodeType": "VariableDeclaration",
                  "scope": 68,
                  "src": "1623:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 49,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1623:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1622:19:0"
            },
            "returnParameters": {
              "id": 52,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1649:0:0"
            },
            "scope": 101,
            "src": "1597:140:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 99,
              "nodeType": "Block",
              "src": "1811:154:0",
              "statements": [
                {
                  "body": {
                    "id": 95,
                    "nodeType": "Block",
                    "src": "1864:79:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          "id": 90,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "id": 86,
                              "name": "candidateList",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 8,
                              "src": "1876:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
                                "typeString": "bytes32[] storage ref"
                              }
                            },
                            "id": 88,
                            "indexExpression": {
                              "id": 87,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 76,
                              "src": "1890:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1876:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "id": 89,
                            "name": "candidate",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 70,
                            "src": "1896:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "1876:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 94,
                        "nodeType": "IfStatement",
                        "src": "1872:65:0",
                        "trueBody": {
                          "id": 93,
                          "nodeType": "Block",
                          "src": "1907:30:0",
                          "statements": [
                            {
                              "expression": {
                                "hexValue": "74727565",
                                "id": 91,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1924:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "true"
                              },
                              "functionReturnParameters": 74,
                              "id": 92,
                              "nodeType": "Return",
                              "src": "1917:11:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 82,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 79,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 76,
                      "src": "1833:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 80,
                        "name": "candidateList",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8,
                        "src": "1837:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
                          "typeString": "bytes32[] storage ref"
                        }
                      },
                      "id": 81,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "1837:20:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1833:24:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 96,
                  "initializationExpression": {
                    "assignments": [
                      76
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 76,
                        "mutability": "mutable",
                        "name": "i",
                        "nodeType": "VariableDeclaration",
                        "scope": 96,
                        "src": "1821:6:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 75,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1821:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 78,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 77,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1830:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "1821:10:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 84,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "1859:3:0",
                      "subExpression": {
                        "id": 83,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 76,
                        "src": "1859:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 85,
                    "nodeType": "ExpressionStatement",
                    "src": "1859:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "1817:126:0"
                },
                {
                  "expression": {
                    "hexValue": "66616c7365",
                    "id": 97,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1955:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "false"
                  },
                  "functionReturnParameters": 74,
                  "id": 98,
                  "nodeType": "Return",
                  "src": "1948:12:0"
                }
              ]
            },
            "functionSelector": "392e6678",
            "id": 100,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "validCandidate",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 71,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 70,
                  "mutability": "mutable",
                  "name": "candidate",
                  "nodeType": "VariableDeclaration",
                  "scope": 100,
                  "src": "1765:17:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 69,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1765:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1764:19:0"
            },
            "returnParameters": {
              "id": 74,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 73,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 100,
                  "src": "1805:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 72,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1805:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1804:6:0"
            },
            "scope": 101,
            "src": "1741:224:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 102,
        "src": "146:1821:0"
      }
    ],
    "src": "36:1931:0"
  },
  "bytecode": "608060405234801561001057600080fd5b5060405161051d38038061051d83398101604081905261002f916100a9565b8051610042906001906020840190610049565b505061017d565b828054828255906000526020600020908101928215610084579160200282015b82811115610084578251825591602001919060010190610069565b50610090929150610094565b5090565b5b808211156100905760008155600101610095565b600060208083850312156100bb578182fd5b82516001600160401b03808211156100d1578384fd5b818501915085601f8301126100e4578384fd5b8151818111156100f6576100f6610167565b838102604051601f19603f8301168101818110858211171561011a5761011a610167565b604052828152858101935084860182860187018a1015610138578788fd5b8795505b8386101561015a57805185526001959095019493860193860161013c565b5098975050505050505050565b634e487b7160e01b600052604160045260246000fd5b6103918061018c6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632f265cf714610067578063392e6678146100905780637021939f146100b0578063b13c744b146100c3578063cc9ab267146100e3578063fdbc4006146100f8575b600080fd5b61007a610075366004610287565b61010d565b60405161008791906102f7565b60405180910390f35b6100a361009e366004610287565b61013f565b60405161008791906102e3565b61007a6100be366004610287565b6101a5565b6100d66100d1366004610287565b6101ba565b60405161008791906102ee565b6100f66100f1366004610287565b6101db565b005b61010061022f565b604051610087919061029f565b60006101188261013f565b151560011461012657600080fd5b5060008181526020819052604090205460ff165b919050565b6000805b60015481101561019c57826001828154811061016f57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154141561018a57600191505061013a565b806101948161032a565b915050610143565b50600092915050565b60006020819052908152604090205460ff1681565b600181815481106101ca57600080fd5b600091825260209091200154905081565b6101e48161013f565b15156001146101f257600080fd5b600081815260208190526040812080546001929061021490849060ff16610305565b92506101000a81548160ff021916908360ff16021790555050565b6060600180548060200260200160405190810160405280929190818152602001828054801561027d57602002820191906000526020600020905b815481526020019060010190808311610269575b5050505050905090565b600060208284031215610298578081fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156102d7578351835292840192918401916001016102bb565b50909695505050505050565b901515815260200190565b90815260200190565b60ff91909116815260200190565b600060ff821660ff84168060ff0382111561032257610322610345565b019392505050565b600060001982141561033e5761033e610345565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220cfbe582e5a8ccc0ffad3bd7d67009b38652b69b4436da749fa629589db5c8fcb64736f6c63430008010033",
  "bytecodeSha1": "19c74edf5bd7b14f64b0688bde92798a2f9dd131",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.1+commit.df193b15"
  },
  "contractName": "Voting",
  "coverageMap": {
    "branches": {
      "0": {
        "Voting.totalVotesFor": {
          "8": [
            1401,
            1434,
            true
          ]
        },
        "Voting.validCandidate": {
          "9": [
            1876,
            1905,
            false
          ]
        },
        "Voting.voteForCandidate": {
          "10": [
            1663,
            1696,
            true
          ]
        }
      }
    },
    "statements": {
      "0": {
        "Voting.getCandidateList": {
          "7": [
            1213,
            1233
          ]
        },
        "Voting.totalVotesFor": {
          "0": [
            1393,
            1435
          ],
          "1": [
            1441,
            1472
          ]
        },
        "Voting.validCandidate": {
          "2": [
            1917,
            1928
          ],
          "3": [
            1859,
            1862
          ],
          "4": [
            1948,
            1960
          ]
        },
        "Voting.voteForCandidate": {
          "5": [
            1655,
            1697
          ],
          "6": [
            1703,
            1732
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100625760003560e01c80632f265cf714610067578063392e6678146100905780637021939f146100b0578063b13c744b146100c3578063cc9ab267146100e3578063fdbc4006146100f8575b600080fd5b61007a610075366004610287565b61010d565b60405161008791906102f7565b60405180910390f35b6100a361009e366004610287565b61013f565b60405161008791906102e3565b61007a6100be366004610287565b6101a5565b6100d66100d1366004610287565b6101ba565b60405161008791906102ee565b6100f66100f1366004610287565b6101db565b005b61010061022f565b604051610087919061029f565b60006101188261013f565b151560011461012657600080fd5b5060008181526020819052604090205460ff165b919050565b6000805b60015481101561019c57826001828154811061016f57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154141561018a57600191505061013a565b806101948161032a565b915050610143565b50600092915050565b60006020819052908152604090205460ff1681565b600181815481106101ca57600080fd5b600091825260209091200154905081565b6101e48161013f565b15156001146101f257600080fd5b600081815260208190526040812080546001929061021490849060ff16610305565b92506101000a81548160ff021916908360ff16021790555050565b6060600180548060200260200160405190810160405280929190818152602001828054801561027d57602002820191906000526020600020905b815481526020019060010190808311610269575b5050505050905090565b600060208284031215610298578081fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156102d7578351835292840192918401916001016102bb565b50909695505050505050565b901515815260200190565b90815260200190565b60ff91909116815260200190565b600060ff821660ff84168060ff0382111561032257610322610345565b019392505050565b600060001982141561033e5761033e610345565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220cfbe582e5a8ccc0ffad3bd7d67009b38652b69b4436da749fa629589db5c8fcb64736f6c63430008010033",
  "deployedSourceMap": "146:1821:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1317:160;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1741:224;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;375:47::-;;;;;;:::i;:::-;;:::i;595:30::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1597:140::-;;;;;;:::i;:::-;;:::i;:::-;;1140:98;;;:::i;:::-;;;;;;;:::i;1317:160::-;1380:5;1401:25;1416:9;1401:14;:25::i;:::-;:33;;1430:4;1401:33;1393:42;;;;;;-1:-1:-1;1448:13:0;:24;;;;;;;;;;;;;1317:160;;;;:::o;1741:224::-;1805:4;;1817:126;1837:13;:20;1833:24;;1817:126;;;1896:9;1876:13;1890:1;1876:16;;;;;;-1:-1:-1;;;1876:16:0;;;;;;;;;;;;;;;;;:29;1872:65;;;1924:4;1917:11;;;;;1872:65;1859:3;;;;:::i;:::-;;;;1817:126;;;-1:-1:-1;1955:5:0;;1741:224;-1:-1:-1;;1741:224:0:o;375:47::-;;;;;;;;;;;;;;;;:::o;595:30::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;595:30:0;:::o;1597:140::-;1663:25;1678:9;1663:14;:25::i;:::-;:33;;1692:4;1663:33;1655:42;;;;;;1703:13;:24;;;;;;;;;;:29;;1731:1;;1703:13;:29;;1731:1;;1703:29;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1597:140;:::o;1140:98::-;1189:16;1220:13;1213:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1140:98;:::o;14:190:1:-;;126:2;114:9;105:7;101:23;97:32;94:2;;;147:6;139;132:22;94:2;-1:-1:-1;175:23:1;;84:120;-1:-1:-1;84:120:1:o;404:635::-;575:2;627:21;;;697:13;;600:18;;;719:22;;;404:635;;575:2;798:15;;;;772:2;757:18;;;404:635;844:169;858:6;855:1;852:13;844:169;;;919:13;;907:26;;988:15;;;;953:12;;;;880:1;873:9;844:169;;;-1:-1:-1;1030:3:1;;555:484;-1:-1:-1;;;;;;555:484:1:o;1044:187::-;1209:14;;1202:22;1184:41;;1172:2;1157:18;;1139:92::o;1236:177::-;1382:25;;;1370:2;1355:18;;1337:76::o;1418:184::-;1590:4;1578:17;;;;1560:36;;1548:2;1533:18;;1515:87::o;1607:204::-;;1681:4;1678:1;1674:12;1713:4;1710:1;1706:12;1748:3;1742:4;1738:14;1733:3;1730:23;1727:2;;;1756:18;;:::i;:::-;1792:13;;1653:158;-1:-1:-1;;;1653:158:1:o;1816:135::-;;-1:-1:-1;;1876:17:1;;1873:2;;;1896:18;;:::i;:::-;-1:-1:-1;1943:1:1;1932:13;;1863:88::o;1956:127::-;2017:10;2012:3;2008:20;2005:1;1998:31;2048:4;2045:1;2038:15;2072:4;2069:1;2062:15",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    146,
    1967
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2F265CF7 EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x392E6678 EQ PUSH2 0x90 JUMPI DUP1 PUSH4 0x7021939F EQ PUSH2 0xB0 JUMPI DUP1 PUSH4 0xB13C744B EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0xCC9AB267 EQ PUSH2 0xE3 JUMPI DUP1 PUSH4 0xFDBC4006 EQ PUSH2 0xF8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7A PUSH2 0x75 CALLDATASIZE PUSH1 0x4 PUSH2 0x287 JUMP JUMPDEST PUSH2 0x10D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x87 SWAP2 SWAP1 PUSH2 0x2F7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA3 PUSH2 0x9E CALLDATASIZE PUSH1 0x4 PUSH2 0x287 JUMP JUMPDEST PUSH2 0x13F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x87 SWAP2 SWAP1 PUSH2 0x2E3 JUMP JUMPDEST PUSH2 0x7A PUSH2 0xBE CALLDATASIZE PUSH1 0x4 PUSH2 0x287 JUMP JUMPDEST PUSH2 0x1A5 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0xD1 CALLDATASIZE PUSH1 0x4 PUSH2 0x287 JUMP JUMPDEST PUSH2 0x1BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x87 SWAP2 SWAP1 PUSH2 0x2EE JUMP JUMPDEST PUSH2 0xF6 PUSH2 0xF1 CALLDATASIZE PUSH1 0x4 PUSH2 0x287 JUMP JUMPDEST PUSH2 0x1DB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x100 PUSH2 0x22F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x87 SWAP2 SWAP1 PUSH2 0x29F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x118 DUP3 PUSH2 0x13F JUMP JUMPDEST ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x126 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x1 SLOAD DUP2 LT ISZERO PUSH2 0x19C JUMPI DUP3 PUSH1 0x1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x16F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD EQ ISZERO PUSH2 0x18A JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x13A JUMP JUMPDEST DUP1 PUSH2 0x194 DUP2 PUSH2 0x32A JUMP JUMPDEST SWAP2 POP POP PUSH2 0x143 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0x1E4 DUP2 PUSH2 0x13F JUMP JUMPDEST ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x1F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x214 SWAP1 DUP5 SWAP1 PUSH1 0xFF AND PUSH2 0x305 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0xFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x27D JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x269 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x298 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2D7 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2BB JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP5 AND DUP1 PUSH1 0xFF SUB DUP3 GT ISZERO PUSH2 0x322 JUMPI PUSH2 0x322 PUSH2 0x345 JUMP JUMPDEST ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x33E JUMPI PUSH2 0x33E PUSH2 0x345 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF 0xBE PC 0x2E GAS DUP13 0xCC 0xF STATICCALL 0xD3 0xBD PUSH30 0x67009B38652B69B4436DA749FA629589DB5C8FCB64736F6C634300080100 CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        146,
        1967
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "6": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "DUP1",
      "path": "0"
    },
    "7": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "8": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "12": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "DUP1",
      "path": "0"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "REVERT",
      "path": "0"
    },
    "16": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "17": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "POP",
      "path": "0"
    },
    "18": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "21": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "LT",
      "path": "0"
    },
    "22": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x62"
    },
    "25": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "26": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "29": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "SHR",
      "path": "0"
    },
    "32": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "DUP1",
      "path": "0"
    },
    "33": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x2F265CF7"
    },
    "38": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "EQ",
      "path": "0"
    },
    "39": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x67"
    },
    "42": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "43": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "DUP1",
      "path": "0"
    },
    "44": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x392E6678"
    },
    "49": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "EQ",
      "path": "0"
    },
    "50": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x90"
    },
    "53": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "54": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "DUP1",
      "path": "0"
    },
    "55": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x7021939F"
    },
    "60": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "EQ",
      "path": "0"
    },
    "61": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB0"
    },
    "64": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "65": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "DUP1",
      "path": "0"
    },
    "66": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xB13C744B"
    },
    "71": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "EQ",
      "path": "0"
    },
    "72": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC3"
    },
    "75": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "76": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "DUP1",
      "path": "0"
    },
    "77": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xCC9AB267"
    },
    "82": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "EQ",
      "path": "0"
    },
    "83": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE3"
    },
    "86": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "87": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "DUP1",
      "path": "0"
    },
    "88": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xFDBC4006"
    },
    "93": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "EQ",
      "path": "0"
    },
    "94": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF8"
    },
    "97": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "98": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "99": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "101": {
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "DUP1",
      "path": "0"
    },
    "102": {
      "first_revert": true,
      "fn": null,
      "offset": [
        146,
        1967
      ],
      "op": "REVERT",
      "path": "0"
    },
    "103": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "104": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7A"
    },
    "107": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x75"
    },
    "110": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "111": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "113": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x287"
    },
    "116": {
      "fn": "Voting.totalVotesFor",
      "jump": "i",
      "offset": [
        1317,
        1477
      ],
      "op": "JUMP",
      "path": "0"
    },
    "117": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "118": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10D"
    },
    "121": {
      "fn": "Voting.totalVotesFor",
      "jump": "i",
      "offset": [
        1317,
        1477
      ],
      "op": "JUMP",
      "path": "0"
    },
    "122": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "123": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "125": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "126": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x87"
    },
    "129": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "130": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "131": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2F7"
    },
    "134": {
      "fn": "Voting.totalVotesFor",
      "jump": "i",
      "offset": [
        1317,
        1477
      ],
      "op": "JUMP",
      "path": "0"
    },
    "135": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "136": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "138": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "139": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "DUP1",
      "path": "0"
    },
    "140": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "141": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "SUB",
      "path": "0"
    },
    "142": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "143": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "RETURN",
      "path": "0"
    },
    "144": {
      "fn": "Voting.validCandidate",
      "offset": [
        1741,
        1965
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "145": {
      "fn": "Voting.validCandidate",
      "offset": [
        1741,
        1965
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA3"
    },
    "148": {
      "fn": "Voting.validCandidate",
      "offset": [
        1741,
        1965
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9E"
    },
    "151": {
      "fn": "Voting.validCandidate",
      "offset": [
        1741,
        1965
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "152": {
      "fn": "Voting.validCandidate",
      "offset": [
        1741,
        1965
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "154": {
      "fn": "Voting.validCandidate",
      "offset": [
        1741,
        1965
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x287"
    },
    "157": {
      "fn": "Voting.validCandidate",
      "jump": "i",
      "offset": [
        1741,
        1965
      ],
      "op": "JUMP",
      "path": "0"
    },
    "158": {
      "fn": "Voting.validCandidate",
      "offset": [
        1741,
        1965
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "159": {
      "fn": "Voting.validCandidate",
      "offset": [
        1741,
        1965
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13F"
    },
    "162": {
      "fn": "Voting.validCandidate",
      "jump": "i",
      "offset": [
        1741,
        1965
      ],
      "op": "JUMP",
      "path": "0"
    },
    "163": {
      "fn": "Voting.validCandidate",
      "offset": [
        1741,
        1965
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "164": {
      "fn": "Voting.validCandidate",
      "offset": [
        1741,
        1965
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "166": {
      "fn": "Voting.validCandidate",
      "offset": [
        1741,
        1965
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "167": {
      "fn": "Voting.validCandidate",
      "offset": [
        1741,
        1965
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x87"
    },
    "170": {
      "fn": "Voting.validCandidate",
      "offset": [
        1741,
        1965
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "171": {
      "fn": "Voting.validCandidate",
      "offset": [
        1741,
        1965
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "172": {
      "fn": "Voting.validCandidate",
      "offset": [
        1741,
        1965
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2E3"
    },
    "175": {
      "fn": "Voting.validCandidate",
      "jump": "i",
      "offset": [
        1741,
        1965
      ],
      "op": "JUMP",
      "path": "0"
    },
    "176": {
      "offset": [
        375,
        422
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "177": {
      "fn": "Voting.validCandidate",
      "offset": [
        375,
        422
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7A"
    },
    "180": {
      "fn": "Voting.validCandidate",
      "offset": [
        375,
        422
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xBE"
    },
    "183": {
      "fn": "Voting.validCandidate",
      "offset": [
        375,
        422
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "184": {
      "fn": "Voting.validCandidate",
      "offset": [
        375,
        422
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "186": {
      "fn": "Voting.validCandidate",
      "offset": [
        375,
        422
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x287"
    },
    "189": {
      "fn": "Voting.validCandidate",
      "jump": "i",
      "offset": [
        375,
        422
      ],
      "op": "JUMP",
      "path": "0"
    },
    "190": {
      "fn": "Voting.validCandidate",
      "offset": [
        375,
        422
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "191": {
      "fn": "Voting.validCandidate",
      "offset": [
        375,
        422
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1A5"
    },
    "194": {
      "fn": "Voting.validCandidate",
      "jump": "i",
      "offset": [
        375,
        422
      ],
      "op": "JUMP",
      "path": "0"
    },
    "195": {
      "offset": [
        595,
        625
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "196": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD6"
    },
    "199": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD1"
    },
    "202": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "203": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "205": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x287"
    },
    "208": {
      "fn": "Voting.validCandidate",
      "jump": "i",
      "offset": [
        595,
        625
      ],
      "op": "JUMP",
      "path": "0"
    },
    "209": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "210": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1BA"
    },
    "213": {
      "fn": "Voting.validCandidate",
      "jump": "i",
      "offset": [
        595,
        625
      ],
      "op": "JUMP",
      "path": "0"
    },
    "214": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "215": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "217": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "218": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x87"
    },
    "221": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "222": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "223": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2EE"
    },
    "226": {
      "fn": "Voting.validCandidate",
      "jump": "i",
      "offset": [
        595,
        625
      ],
      "op": "JUMP",
      "path": "0"
    },
    "227": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1597,
        1737
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "228": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1597,
        1737
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF6"
    },
    "231": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1597,
        1737
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF1"
    },
    "234": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1597,
        1737
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "235": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1597,
        1737
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "237": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1597,
        1737
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x287"
    },
    "240": {
      "fn": "Voting.voteForCandidate",
      "jump": "i",
      "offset": [
        1597,
        1737
      ],
      "op": "JUMP",
      "path": "0"
    },
    "241": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1597,
        1737
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "242": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1597,
        1737
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1DB"
    },
    "245": {
      "fn": "Voting.voteForCandidate",
      "jump": "i",
      "offset": [
        1597,
        1737
      ],
      "op": "JUMP",
      "path": "0"
    },
    "246": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1597,
        1737
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "247": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1597,
        1737
      ],
      "op": "STOP",
      "path": "0"
    },
    "248": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1140,
        1238
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "249": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1140,
        1238
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "252": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1140,
        1238
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x22F"
    },
    "255": {
      "fn": "Voting.getCandidateList",
      "jump": "i",
      "offset": [
        1140,
        1238
      ],
      "op": "JUMP",
      "path": "0"
    },
    "256": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1140,
        1238
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "257": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1140,
        1238
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "259": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1140,
        1238
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "260": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1140,
        1238
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x87"
    },
    "263": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1140,
        1238
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "264": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1140,
        1238
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "265": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1140,
        1238
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x29F"
    },
    "268": {
      "fn": "Voting.getCandidateList",
      "jump": "i",
      "offset": [
        1140,
        1238
      ],
      "op": "JUMP",
      "path": "0"
    },
    "269": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "270": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1380,
        1385
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "272": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1401,
        1426
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 0,
      "value": "0x118"
    },
    "275": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1416,
        1425
      ],
      "op": "DUP3",
      "path": "0"
    },
    "276": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1401,
        1415
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13F"
    },
    "279": {
      "fn": "Voting.totalVotesFor",
      "jump": "i",
      "offset": [
        1401,
        1426
      ],
      "op": "JUMP",
      "path": "0"
    },
    "280": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1401,
        1426
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "281": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1401,
        1434
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "282": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1401,
        1434
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "283": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1430,
        1434
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "285": {
      "branch": 8,
      "fn": "Voting.totalVotesFor",
      "offset": [
        1401,
        1434
      ],
      "op": "EQ",
      "path": "0"
    },
    "286": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1393,
        1435
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x126"
    },
    "289": {
      "branch": 8,
      "fn": "Voting.totalVotesFor",
      "offset": [
        1393,
        1435
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "290": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1393,
        1435
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "292": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1393,
        1435
      ],
      "op": "DUP1",
      "path": "0"
    },
    "293": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1393,
        1435
      ],
      "op": "REVERT",
      "path": "0"
    },
    "294": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1393,
        1435
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "295": {
      "op": "POP"
    },
    "296": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1448,
        1461
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 1,
      "value": "0x0"
    },
    "298": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1448,
        1472
      ],
      "op": "DUP2",
      "path": "0"
    },
    "299": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1448,
        1472
      ],
      "op": "DUP2",
      "path": "0"
    },
    "300": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1448,
        1472
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "301": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1448,
        1472
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "303": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1448,
        1472
      ],
      "op": "DUP2",
      "path": "0"
    },
    "304": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1448,
        1472
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "305": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1448,
        1472
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "306": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1448,
        1472
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "308": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1448,
        1472
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "309": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1448,
        1472
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "310": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1448,
        1472
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "311": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1448,
        1472
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "313": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1448,
        1472
      ],
      "op": "AND",
      "path": "0"
    },
    "314": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "315": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "316": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "317": {
      "fn": "Voting.totalVotesFor",
      "offset": [
        1317,
        1477
      ],
      "op": "POP",
      "path": "0"
    },
    "318": {
      "fn": "Voting.totalVotesFor",
      "jump": "o",
      "offset": [
        1317,
        1477
      ],
      "op": "JUMP",
      "path": "0"
    },
    "319": {
      "fn": "Voting.validCandidate",
      "offset": [
        1741,
        1965
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "320": {
      "fn": "Voting.validCandidate",
      "offset": [
        1805,
        1809
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "322": {
      "fn": "Voting.validCandidate",
      "offset": [
        1805,
        1809
      ],
      "op": "DUP1",
      "path": "0"
    },
    "323": {
      "fn": "Voting.validCandidate",
      "offset": [
        1817,
        1943
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "324": {
      "fn": "Voting.validCandidate",
      "offset": [
        1837,
        1850
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "326": {
      "fn": "Voting.validCandidate",
      "offset": [
        1837,
        1857
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "327": {
      "fn": "Voting.validCandidate",
      "offset": [
        1833,
        1857
      ],
      "op": "DUP2",
      "path": "0"
    },
    "328": {
      "fn": "Voting.validCandidate",
      "offset": [
        1833,
        1857
      ],
      "op": "LT",
      "path": "0"
    },
    "329": {
      "fn": "Voting.validCandidate",
      "offset": [
        1817,
        1943
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "330": {
      "fn": "Voting.validCandidate",
      "offset": [
        1817,
        1943
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x19C"
    },
    "333": {
      "fn": "Voting.validCandidate",
      "offset": [
        1817,
        1943
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "334": {
      "fn": "Voting.validCandidate",
      "offset": [
        1896,
        1905
      ],
      "op": "DUP3",
      "path": "0"
    },
    "335": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1889
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "337": {
      "fn": "Voting.validCandidate",
      "offset": [
        1890,
        1891
      ],
      "op": "DUP3",
      "path": "0"
    },
    "338": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1892
      ],
      "op": "DUP2",
      "path": "0"
    },
    "339": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1892
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "340": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1892
      ],
      "op": "DUP2",
      "path": "0"
    },
    "341": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1892
      ],
      "op": "LT",
      "path": "0"
    },
    "342": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1892
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x16F"
    },
    "345": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1892
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "346": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "351": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "353": {
      "op": "SHL"
    },
    "354": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1892
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "356": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1892
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "357": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1892
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x32"
    },
    "359": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1892
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "361": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1892
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "362": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1892
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x24"
    },
    "364": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1892
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "366": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1892
      ],
      "op": "REVERT",
      "path": "0"
    },
    "367": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1892
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "368": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1892
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "369": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1892
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "371": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1892
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "372": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1892
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "374": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1892
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "376": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1892
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "377": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1892
      ],
      "op": "ADD",
      "path": "0"
    },
    "378": {
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1892
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "379": {
      "branch": 9,
      "fn": "Voting.validCandidate",
      "offset": [
        1876,
        1905
      ],
      "op": "EQ",
      "path": "0"
    },
    "380": {
      "fn": "Voting.validCandidate",
      "offset": [
        1872,
        1937
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "381": {
      "fn": "Voting.validCandidate",
      "offset": [
        1872,
        1937
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x18A"
    },
    "384": {
      "branch": 9,
      "fn": "Voting.validCandidate",
      "offset": [
        1872,
        1937
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "385": {
      "fn": "Voting.validCandidate",
      "offset": [
        1924,
        1928
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 2,
      "value": "0x1"
    },
    "387": {
      "fn": "Voting.validCandidate",
      "offset": [
        1917,
        1928
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "388": {
      "fn": "Voting.validCandidate",
      "offset": [
        1917,
        1928
      ],
      "op": "POP",
      "path": "0"
    },
    "389": {
      "fn": "Voting.validCandidate",
      "offset": [
        1917,
        1928
      ],
      "op": "POP",
      "path": "0"
    },
    "390": {
      "fn": "Voting.validCandidate",
      "offset": [
        1917,
        1928
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13A"
    },
    "393": {
      "fn": "Voting.validCandidate",
      "offset": [
        1917,
        1928
      ],
      "op": "JUMP",
      "path": "0"
    },
    "394": {
      "fn": "Voting.validCandidate",
      "offset": [
        1872,
        1937
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "395": {
      "fn": "Voting.validCandidate",
      "offset": [
        1859,
        1862
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 3
    },
    "396": {
      "fn": "Voting.validCandidate",
      "offset": [
        1859,
        1862
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x194"
    },
    "399": {
      "fn": "Voting.validCandidate",
      "offset": [
        1859,
        1862
      ],
      "op": "DUP2",
      "path": "0"
    },
    "400": {
      "fn": "Voting.validCandidate",
      "offset": [
        1859,
        1862
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x32A"
    },
    "403": {
      "fn": "Voting.validCandidate",
      "jump": "i",
      "offset": [
        1859,
        1862
      ],
      "op": "JUMP",
      "path": "0"
    },
    "404": {
      "fn": "Voting.validCandidate",
      "offset": [
        1859,
        1862
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "405": {
      "fn": "Voting.validCandidate",
      "offset": [
        1859,
        1862
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "406": {
      "fn": "Voting.validCandidate",
      "offset": [
        1859,
        1862
      ],
      "op": "POP",
      "path": "0"
    },
    "407": {
      "fn": "Voting.validCandidate",
      "offset": [
        1859,
        1862
      ],
      "op": "POP",
      "path": "0"
    },
    "408": {
      "fn": "Voting.validCandidate",
      "offset": [
        1817,
        1943
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x143"
    },
    "411": {
      "fn": "Voting.validCandidate",
      "offset": [
        1817,
        1943
      ],
      "op": "JUMP",
      "path": "0"
    },
    "412": {
      "fn": "Voting.validCandidate",
      "offset": [
        1817,
        1943
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "413": {
      "op": "POP"
    },
    "414": {
      "fn": "Voting.validCandidate",
      "offset": [
        1955,
        1960
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 4,
      "value": "0x0"
    },
    "416": {
      "fn": "Voting.validCandidate",
      "offset": [
        1955,
        1960
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "417": {
      "fn": "Voting.validCandidate",
      "offset": [
        1741,
        1965
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "418": {
      "op": "POP"
    },
    "419": {
      "op": "POP"
    },
    "420": {
      "fn": "Voting.validCandidate",
      "jump": "o",
      "offset": [
        1741,
        1965
      ],
      "op": "JUMP",
      "path": "0"
    },
    "421": {
      "offset": [
        375,
        422
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "422": {
      "fn": "Voting.validCandidate",
      "offset": [
        375,
        422
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "424": {
      "fn": "Voting.validCandidate",
      "offset": [
        375,
        422
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "426": {
      "fn": "Voting.validCandidate",
      "offset": [
        375,
        422
      ],
      "op": "DUP2",
      "path": "0"
    },
    "427": {
      "fn": "Voting.validCandidate",
      "offset": [
        375,
        422
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "428": {
      "fn": "Voting.validCandidate",
      "offset": [
        375,
        422
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "429": {
      "fn": "Voting.validCandidate",
      "offset": [
        375,
        422
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "430": {
      "fn": "Voting.validCandidate",
      "offset": [
        375,
        422
      ],
      "op": "DUP2",
      "path": "0"
    },
    "431": {
      "fn": "Voting.validCandidate",
      "offset": [
        375,
        422
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "432": {
      "fn": "Voting.validCandidate",
      "offset": [
        375,
        422
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "434": {
      "fn": "Voting.validCandidate",
      "offset": [
        375,
        422
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "435": {
      "fn": "Voting.validCandidate",
      "offset": [
        375,
        422
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "436": {
      "fn": "Voting.validCandidate",
      "offset": [
        375,
        422
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "437": {
      "fn": "Voting.validCandidate",
      "offset": [
        375,
        422
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "439": {
      "fn": "Voting.validCandidate",
      "offset": [
        375,
        422
      ],
      "op": "AND",
      "path": "0"
    },
    "440": {
      "fn": "Voting.validCandidate",
      "offset": [
        375,
        422
      ],
      "op": "DUP2",
      "path": "0"
    },
    "441": {
      "fn": "Voting.validCandidate",
      "jump": "o",
      "offset": [
        375,
        422
      ],
      "op": "JUMP",
      "path": "0"
    },
    "442": {
      "offset": [
        595,
        625
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "443": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "445": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "DUP2",
      "path": "0"
    },
    "446": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "DUP2",
      "path": "0"
    },
    "447": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "448": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "DUP2",
      "path": "0"
    },
    "449": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "LT",
      "path": "0"
    },
    "450": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1CA"
    },
    "453": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "454": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "456": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "DUP1",
      "path": "0"
    },
    "457": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "REVERT",
      "path": "0"
    },
    "458": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "459": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "461": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "462": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "DUP3",
      "path": "0"
    },
    "463": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "464": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "466": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "467": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "468": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "469": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "ADD",
      "path": "0"
    },
    "470": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "471": {
      "fn": "Voting.validCandidate",
      "offset": [
        595,
        625
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "472": {
      "op": "POP"
    },
    "473": {
      "offset": [
        595,
        625
      ],
      "op": "DUP2",
      "path": "0"
    },
    "474": {
      "fn": "Voting.validCandidate",
      "jump": "o",
      "offset": [
        595,
        625
      ],
      "op": "JUMP",
      "path": "0"
    },
    "475": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1597,
        1737
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "476": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1663,
        1688
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 5,
      "value": "0x1E4"
    },
    "479": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1678,
        1687
      ],
      "op": "DUP2",
      "path": "0"
    },
    "480": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1663,
        1677
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13F"
    },
    "483": {
      "fn": "Voting.voteForCandidate",
      "jump": "i",
      "offset": [
        1663,
        1688
      ],
      "op": "JUMP",
      "path": "0"
    },
    "484": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1663,
        1688
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "485": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1663,
        1696
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "486": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1663,
        1696
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "487": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1692,
        1696
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "489": {
      "branch": 10,
      "fn": "Voting.voteForCandidate",
      "offset": [
        1663,
        1696
      ],
      "op": "EQ",
      "path": "0"
    },
    "490": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1655,
        1697
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1F2"
    },
    "493": {
      "branch": 10,
      "fn": "Voting.voteForCandidate",
      "offset": [
        1655,
        1697
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "494": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1655,
        1697
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "496": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1655,
        1697
      ],
      "op": "DUP1",
      "path": "0"
    },
    "497": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1655,
        1697
      ],
      "op": "REVERT",
      "path": "0"
    },
    "498": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1655,
        1697
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "499": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1716
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 6,
      "value": "0x0"
    },
    "501": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1727
      ],
      "op": "DUP2",
      "path": "0"
    },
    "502": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1727
      ],
      "op": "DUP2",
      "path": "0"
    },
    "503": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1727
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "504": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1727
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "506": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1727
      ],
      "op": "DUP2",
      "path": "0"
    },
    "507": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1727
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "508": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1727
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "509": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1727
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "511": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1727
      ],
      "op": "DUP2",
      "path": "0"
    },
    "512": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1727
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "513": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "DUP1",
      "path": "0"
    },
    "514": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "515": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1731,
        1732
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "517": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1731,
        1732
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "518": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1716
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "519": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x214"
    },
    "522": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "523": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1731,
        1732
      ],
      "op": "DUP5",
      "path": "0"
    },
    "524": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1731,
        1732
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "525": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "527": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "AND",
      "path": "0"
    },
    "528": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x305"
    },
    "531": {
      "fn": "Voting.voteForCandidate",
      "jump": "i",
      "offset": [
        1703,
        1732
      ],
      "op": "JUMP",
      "path": "0"
    },
    "532": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "533": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "534": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "POP",
      "path": "0"
    },
    "535": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "538": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "EXP",
      "path": "0"
    },
    "539": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "DUP2",
      "path": "0"
    },
    "540": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "541": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "DUP2",
      "path": "0"
    },
    "542": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "544": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "MUL",
      "path": "0"
    },
    "545": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "NOT",
      "path": "0"
    },
    "546": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "AND",
      "path": "0"
    },
    "547": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "548": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "DUP4",
      "path": "0"
    },
    "549": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "551": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "AND",
      "path": "0"
    },
    "552": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "MUL",
      "path": "0"
    },
    "553": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "OR",
      "path": "0"
    },
    "554": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "555": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "556": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1703,
        1732
      ],
      "op": "POP",
      "path": "0"
    },
    "557": {
      "fn": "Voting.voteForCandidate",
      "offset": [
        1597,
        1737
      ],
      "op": "POP",
      "path": "0"
    },
    "558": {
      "fn": "Voting.voteForCandidate",
      "jump": "o",
      "offset": [
        1597,
        1737
      ],
      "op": "JUMP",
      "path": "0"
    },
    "559": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1140,
        1238
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "560": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1189,
        1205
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "562": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1220,
        1233
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 7,
      "value": "0x1"
    },
    "564": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "DUP1",
      "path": "0"
    },
    "565": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "566": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "DUP1",
      "path": "0"
    },
    "567": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "569": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "MUL",
      "path": "0"
    },
    "570": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "572": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "ADD",
      "path": "0"
    },
    "573": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "575": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "576": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "577": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "DUP2",
      "path": "0"
    },
    "578": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "ADD",
      "path": "0"
    },
    "579": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "581": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "582": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "DUP1",
      "path": "0"
    },
    "583": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "584": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "585": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "586": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "DUP2",
      "path": "0"
    },
    "587": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "DUP2",
      "path": "0"
    },
    "588": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "589": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "591": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "ADD",
      "path": "0"
    },
    "592": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "DUP3",
      "path": "0"
    },
    "593": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "DUP1",
      "path": "0"
    },
    "594": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "595": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "DUP1",
      "path": "0"
    },
    "596": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "597": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x27D"
    },
    "600": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "601": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "603": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "MUL",
      "path": "0"
    },
    "604": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "DUP3",
      "path": "0"
    },
    "605": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "ADD",
      "path": "0"
    },
    "606": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "607": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "608": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "610": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "611": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "613": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "615": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "616": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "617": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "618": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "DUP2",
      "path": "0"
    },
    "619": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "620": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "DUP2",
      "path": "0"
    },
    "621": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "622": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "624": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "ADD",
      "path": "0"
    },
    "625": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "626": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "628": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "ADD",
      "path": "0"
    },
    "629": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "630": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "DUP1",
      "path": "0"
    },
    "631": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "DUP4",
      "path": "0"
    },
    "632": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "GT",
      "path": "0"
    },
    "633": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x269"
    },
    "636": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "637": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "638": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "POP",
      "path": "0"
    },
    "639": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "POP",
      "path": "0"
    },
    "640": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "POP",
      "path": "0"
    },
    "641": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "POP",
      "path": "0"
    },
    "642": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "POP",
      "path": "0"
    },
    "643": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "644": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1213,
        1233
      ],
      "op": "POP",
      "path": "0"
    },
    "645": {
      "fn": "Voting.getCandidateList",
      "offset": [
        1140,
        1238
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "646": {
      "fn": "Voting.getCandidateList",
      "jump": "o",
      "offset": [
        1140,
        1238
      ],
      "op": "JUMP",
      "path": "0"
    },
    "647": {
      "op": "JUMPDEST"
    },
    "648": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "650": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "652": {
      "op": "DUP3"
    },
    "653": {
      "op": "DUP5"
    },
    "654": {
      "op": "SUB"
    },
    "655": {
      "op": "SLT"
    },
    "656": {
      "op": "ISZERO"
    },
    "657": {
      "op": "PUSH2",
      "value": "0x298"
    },
    "660": {
      "op": "JUMPI"
    },
    "661": {
      "op": "DUP1"
    },
    "662": {
      "op": "DUP2"
    },
    "663": {
      "op": "REVERT"
    },
    "664": {
      "op": "JUMPDEST"
    },
    "665": {
      "op": "POP"
    },
    "666": {
      "op": "CALLDATALOAD"
    },
    "667": {
      "op": "SWAP2"
    },
    "668": {
      "op": "SWAP1"
    },
    "669": {
      "op": "POP"
    },
    "670": {
      "jump": "o",
      "op": "JUMP"
    },
    "671": {
      "op": "JUMPDEST"
    },
    "672": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "674": {
      "op": "DUP1"
    },
    "675": {
      "op": "DUP3"
    },
    "676": {
      "op": "MSTORE"
    },
    "677": {
      "op": "DUP3"
    },
    "678": {
      "op": "MLOAD"
    },
    "679": {
      "op": "DUP3"
    },
    "680": {
      "op": "DUP3"
    },
    "681": {
      "op": "ADD"
    },
    "682": {
      "op": "DUP2"
    },
    "683": {
      "op": "SWAP1"
    },
    "684": {
      "op": "MSTORE"
    },
    "685": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "687": {
      "op": "SWAP2"
    },
    "688": {
      "op": "SWAP1"
    },
    "689": {
      "op": "DUP5"
    },
    "690": {
      "op": "DUP3"
    },
    "691": {
      "op": "ADD"
    },
    "692": {
      "op": "SWAP1"
    },
    "693": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "695": {
      "op": "DUP6"
    },
    "696": {
      "op": "ADD"
    },
    "697": {
      "op": "SWAP1"
    },
    "698": {
      "op": "DUP5"
    },
    "699": {
      "op": "JUMPDEST"
    },
    "700": {
      "op": "DUP2"
    },
    "701": {
      "op": "DUP2"
    },
    "702": {
      "op": "LT"
    },
    "703": {
      "op": "ISZERO"
    },
    "704": {
      "op": "PUSH2",
      "value": "0x2D7"
    },
    "707": {
      "op": "JUMPI"
    },
    "708": {
      "op": "DUP4"
    },
    "709": {
      "op": "MLOAD"
    },
    "710": {
      "op": "DUP4"
    },
    "711": {
      "op": "MSTORE"
    },
    "712": {
      "op": "SWAP3"
    },
    "713": {
      "op": "DUP5"
    },
    "714": {
      "op": "ADD"
    },
    "715": {
      "op": "SWAP3"
    },
    "716": {
      "op": "SWAP2"
    },
    "717": {
      "op": "DUP5"
    },
    "718": {
      "op": "ADD"
    },
    "719": {
      "op": "SWAP2"
    },
    "720": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "722": {
      "op": "ADD"
    },
    "723": {
      "op": "PUSH2",
      "value": "0x2BB"
    },
    "726": {
      "op": "JUMP"
    },
    "727": {
      "op": "JUMPDEST"
    },
    "728": {
      "op": "POP"
    },
    "729": {
      "op": "SWAP1"
    },
    "730": {
      "op": "SWAP7"
    },
    "731": {
      "op": "SWAP6"
    },
    "732": {
      "op": "POP"
    },
    "733": {
      "op": "POP"
    },
    "734": {
      "op": "POP"
    },
    "735": {
      "op": "POP"
    },
    "736": {
      "op": "POP"
    },
    "737": {
      "op": "POP"
    },
    "738": {
      "jump": "o",
      "op": "JUMP"
    },
    "739": {
      "op": "JUMPDEST"
    },
    "740": {
      "op": "SWAP1"
    },
    "741": {
      "op": "ISZERO"
    },
    "742": {
      "op": "ISZERO"
    },
    "743": {
      "op": "DUP2"
    },
    "744": {
      "op": "MSTORE"
    },
    "745": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "747": {
      "op": "ADD"
    },
    "748": {
      "op": "SWAP1"
    },
    "749": {
      "jump": "o",
      "op": "JUMP"
    },
    "750": {
      "op": "JUMPDEST"
    },
    "751": {
      "op": "SWAP1"
    },
    "752": {
      "op": "DUP2"
    },
    "753": {
      "op": "MSTORE"
    },
    "754": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "756": {
      "op": "ADD"
    },
    "757": {
      "op": "SWAP1"
    },
    "758": {
      "jump": "o",
      "op": "JUMP"
    },
    "759": {
      "op": "JUMPDEST"
    },
    "760": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "762": {
      "op": "SWAP2"
    },
    "763": {
      "op": "SWAP1"
    },
    "764": {
      "op": "SWAP2"
    },
    "765": {
      "op": "AND"
    },
    "766": {
      "op": "DUP2"
    },
    "767": {
      "op": "MSTORE"
    },
    "768": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "770": {
      "op": "ADD"
    },
    "771": {
      "op": "SWAP1"
    },
    "772": {
      "jump": "o",
      "op": "JUMP"
    },
    "773": {
      "op": "JUMPDEST"
    },
    "774": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "776": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "778": {
      "op": "DUP3"
    },
    "779": {
      "op": "AND"
    },
    "780": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "782": {
      "op": "DUP5"
    },
    "783": {
      "op": "AND"
    },
    "784": {
      "op": "DUP1"
    },
    "785": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "787": {
      "op": "SUB"
    },
    "788": {
      "op": "DUP3"
    },
    "789": {
      "op": "GT"
    },
    "790": {
      "op": "ISZERO"
    },
    "791": {
      "op": "PUSH2",
      "value": "0x322"
    },
    "794": {
      "op": "JUMPI"
    },
    "795": {
      "op": "PUSH2",
      "value": "0x322"
    },
    "798": {
      "op": "PUSH2",
      "value": "0x345"
    },
    "801": {
      "jump": "i",
      "op": "JUMP"
    },
    "802": {
      "op": "JUMPDEST"
    },
    "803": {
      "op": "ADD"
    },
    "804": {
      "op": "SWAP4"
    },
    "805": {
      "op": "SWAP3"
    },
    "806": {
      "op": "POP"
    },
    "807": {
      "op": "POP"
    },
    "808": {
      "op": "POP"
    },
    "809": {
      "jump": "o",
      "op": "JUMP"
    },
    "810": {
      "op": "JUMPDEST"
    },
    "811": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "813": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "815": {
      "op": "NOT"
    },
    "816": {
      "op": "DUP3"
    },
    "817": {
      "op": "EQ"
    },
    "818": {
      "op": "ISZERO"
    },
    "819": {
      "op": "PUSH2",
      "value": "0x33E"
    },
    "822": {
      "op": "JUMPI"
    },
    "823": {
      "op": "PUSH2",
      "value": "0x33E"
    },
    "826": {
      "op": "PUSH2",
      "value": "0x345"
    },
    "829": {
      "jump": "i",
      "op": "JUMP"
    },
    "830": {
      "op": "JUMPDEST"
    },
    "831": {
      "op": "POP"
    },
    "832": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "834": {
      "op": "ADD"
    },
    "835": {
      "op": "SWAP1"
    },
    "836": {
      "jump": "o",
      "op": "JUMP"
    },
    "837": {
      "op": "JUMPDEST"
    },
    "838": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "843": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "845": {
      "op": "SHL"
    },
    "846": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "848": {
      "op": "MSTORE"
    },
    "849": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "851": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "853": {
      "op": "MSTORE"
    },
    "854": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "856": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "858": {
      "op": "REVERT"
    }
  },
  "sha1": "6a866985c445d8a821a9b8314474fac426d676c4",
  "source": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.4.22 <0.9.0;\n\n// We have to specify what version of compiler this code will compile with\n\ncontract Voting {\n  /* mapping field below is equivalent to an associative array or hash.\n  The key of the mapping is the candidate name stored as type bytes32 and value is\n  an unsigned integer to store the vote count\n  */\n  \n  mapping (bytes32 => uint8) public votesReceived;\n  \n  /* Solidity doesn't let you pass in an array of strings in the constructor (yet).\n  We will use an array of bytes32 instead to store the list of candidates\n  */\n  \n  bytes32[] public candidateList;\n\n  /* This is the constructor which will be called once when you\n  deploy the contract to the blockchain. When we deploy the contract,\n  we will pass an array of candidates who will be contesting in the election\n  */\n  constructor(bytes32[] memory candidateNames) public {\n    candidateList = candidateNames;\n  }\n\n  /* Accessing class attributes directly with web3py or web3js sometimes leads to \n  unpredictable behavior. To be safe we create a getter method that returns our \n  array of candidate names.\n  */\n  function getCandidateList() public view returns (bytes32[] memory) {\n    return candidateList;\n  }\n\n  // This function returns the total votes a candidate has received so far\n  function totalVotesFor(bytes32 candidate) public view returns (uint8) {\n    require(validCandidate(candidate) == true);\n    return votesReceived[candidate];\n  }\n\n  // This function increments the vote count for the specified candidate. This\n  // is equivalent to casting a vote\n  function voteForCandidate(bytes32 candidate) public {\n    require(validCandidate(candidate) == true);\n    votesReceived[candidate] += 1;\n  }\n\n  function validCandidate(bytes32 candidate) public view returns (bool) {\n    for(uint i = 0; i < candidateList.length; i++) {\n      if (candidateList[i] == candidate) {\n        return true;\n      }\n    }\n    return false;\n  }\n}",
  "sourceMap": "146:1821:0:-:0;;;846:93;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;904:30;;;;:13;;:30;;;;;:::i;:::-;;846:93;146:1821;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;146:1821:0;;;-1:-1:-1;146:1821:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:1162:1;;140:2;183;171:9;162:7;158:23;154:32;151:2;;;204:6;196;189:22;151:2;236:16;;-1:-1:-1;;;;;301:14:1;;;298:2;;;333:6;325;318:22;298:2;376:6;365:9;361:22;351:32;;421:7;414:4;410:2;406:13;402:27;392:2;;448:6;440;433:22;392:2;482;476:9;504:2;500;497:10;494:2;;;510:18;;:::i;:::-;557:2;553;549:11;589:2;583:9;652:2;648:7;643:2;639;635:11;631:25;623:6;619:38;707:6;695:10;692:22;687:2;675:10;672:18;669:46;666:2;;;718:18;;:::i;:::-;754:2;747:22;804:18;;;838:15;;;;-1:-1:-1;873:11:1;;;903;;;899:20;;896:33;-1:-1:-1;893:2:1;;;947:6;939;932:22;893:2;974:6;965:15;;989:156;1003:2;1000:1;997:9;989:156;;;1060:10;;1048:23;;1021:1;1014:9;;;;;1091:12;;;;1123;;989:156;;;-1:-1:-1;1164:6:1;120:1056;-1:-1:-1;;;;;;;;120:1056:1:o;1181:127::-;1242:10;1237:3;1233:20;1230:1;1223:31;1273:4;1270:1;1263:15;1297:4;1294:1;1287:15;1213:95;146:1821:0;;;;;;",
  "sourcePath": "contracts/votingDaliMMA.sol",
  "type": "contract"
}